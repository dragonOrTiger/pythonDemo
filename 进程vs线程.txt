************************进程vs线程*****************************************
要实现多任务，通常我们会设计Master-Worker模式，Master负责分配任务，Worker负责执行任务，因此，多任务环境下，通常是一个Master,多个Worker
多进程模式的优点：1.稳定性高，因为一个子进程崩溃了，不会影响其他子进程。(著名的Apache最早就是采用多进程模式)
多进程模式的缺点：1.创建进程的代价大，在Unix/Linux系统下，用fork调用还行，在Windows下创建进程开销巨大。
				  2.操作系统能同时运行的进程数也是有限的，在内存和CPU的限制下，如果有几千个进程同时运行，操作系统连调度都成问题
多线程模式的优点：通常比多进程快一点
多线程模式的缺点：任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存。在Windows上，如果一个线程执行的代码出了问题，你经常可以看到这样的提示：“该程序执行了非法操作，即将关闭”，其实往往是某个线程出了问题，但是操作系统会强制结束整个进程。
***********************线程切换*******************************************
操作系统在切换进程或者线程时，需要先保存当前执行的现场环境(CPU寄存器状态、内存页等)，然后，把新任务的执行环境准备好(恢复上次的寄存器状态，切换内存页等)才能开始执行。这个切换过程虽然很快，但是也需要耗费时间。如果有几千个任务同时进行，操作系统可能就主要忙着切换任务，根本没有多少时间去执行任务了，这种情况最常见的就是硬盘狂响，点窗口无反应，系统处于假死状态。
所以，多任务一旦多到一个限度，就会消耗掉系统所有的资源，结果效率急剧下降，所有任务都做不好。
***************************计算密集型 vs IO密集型****************************
计算密集型：
特点：要进行大量的计算，消耗CPU资源，代码运行效率至关重要
比如：计算圆周率，对视频信号进行高清解码等等
这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低。
要想高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数
Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写。
IO密集型：
特点：CPU消耗较少，任务的大部分时间都在等待IO操作完成(因为IO的速度远远低于CPU和内存的速度)
比如：涉及到网络、磁盘IO的任务都是IO密集型任务
对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。
常见的大部分任务都是IO密集型任务，比如Web应用
IO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，完全无法提升运行效率。对于IO密集型任务，最合适的语言就是开发效率最高的语言，脚本语言是首选，C语言最差。
****************************异步IO***************************************
现代操作系统对IO操作已经做了巨大的改进，最大的特点就是支持异步IO。如果充分利用操作系统提供的异步IO支持，就可以用单进程单线程模型来执行多任务，这种全新的模型称为时间驱动模型，Nginx就是支持异步IO的web服务器，它在单核CPU上采用单进程模型就可以高效地支持多任务。在多核CPU上，可以运行多个进程(数量与CPU核心数相同)，充分利用多核CPU。由于系统的总的进程数量十分有限，因此操作系统调度非常高效。用异步IO编程模型来实现多任务是一个主要的趋势。
